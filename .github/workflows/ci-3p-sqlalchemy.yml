name: CI-3p-sqlalchemy

on:
  workflow_dispatch:
  workflow_call:

env:
  TESTNAME: sqlalchemy
  TESTDIST: 'debian12'

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
#        testdist: [ 'debian12' ]
#        infradb: [ 'mysql57', 'mysql80', 'mysql81', 'mysql82', 'mysql83', 'mysql84', 'mysql90', 'mariadb10', 'mariadb11' ]
        infradb: [ 'mysql57', 'mysql80', 'mysql84', 'mysql90' ]
        connector: [ 'pymysql', 'mysqldb', 'asyncmy', 'mariadbconnector' ]
    env:
#      TESTDIST: ${{ matrix.testdist }}
      INFRADB:  ${{ matrix.infradb }}
      CONNECTOR: ${{ matrix.connector }}
#      BLDCACHE: ${{ github.sha }}_${{ matrix.testdist }}_bin
#      BLDCACHE: ${{ github.sha }}_${{ env.TESTDIST }}_bin
      BLDCACHE: ${{ github.sha }}_debian12_bin
      BASELINE: ${{ vars[format('BASELINE_3P_SQLALCHEMY_{0}_{1}', matrix.infradb, matrix.connector)] }}
    outputs:
      summary: ${{ steps.check_baseline.outputs.summary }}

    steps:
        
    - name: Checkout proxysql_3p_testing
      uses: actions/checkout@v4
      with:
        repository: 'proxysql/proxysql_3p_testing'
        ref: 'main'
        fetch-depth: 1
        path: 'proxysql_3p_testing'
        token: ${{ secrets.GH_TOKEN }}
        sparse-checkout: |
          infra-docker-hoster
          test_sqlalchemy
#          proxysql

    - name: Wait for cache
      env:
        GH_TOKEN: ${{ secrets.gh_token }}
      run: |
        echo "BASELINE: '${BASELINE}'"
        echo "Wating for cache '${BLDCACHE}' ..."
        sleep $(( $RANDOM / 1024 ))
        PROBE="$(gh cache list --limit 300 --repo sysown/proxysql | grep -i ${BLDCACHE} || echo '')"
        while [[ -z ${PROBE} ]]; do
          echo "Wating for cache '${BLDCACHE}' ..."
          sleep 30
          PROBE="$(gh cache list --limit 300 --repo sysown/proxysql | grep -i ${BLDCACHE} || echo '')"
        done
        echo "Cache available '${BLDCACHE}'"

    - name: Cache restore bin
      uses: actions/cache/restore@v4
      with:
        key: ${{ env.BLDCACHE }}
        fail-on-cache-miss: true
        path: |
          proxysql/binaries/
        
    - name: Prepare
      run: |
        set +e

        cd proxysql_3p_testing/
        ./setup.sh test_sqlalchemy/sqlalchemy

        # use cached build
        rm -rf ./proxysql  && mv ../proxysql .
                
    - name: Run tests
      run: |
        set +e
        
        cd proxysql_3p_testing/test_sqlalchemy
        #INFRADB=${{ matrix.infradb }} CONNECTOR=${{ matrix.connector }} ./run-tests.bash test/dialect
        INFRADB=${{ matrix.infradb }} CONNECTOR=${{ matrix.connector }} ./run-tests.bash
        RC=$?
        
        #sudo chmod -R 777 ${{ github.workspace }}/*
        exit $RC
        
    - name: Check baseline
      id: check_baseline
      env:
        GH_TOKEN: ${{ secrets.gh_token }}
      run: |
        cd proxysql_3p_testing/test_sqlalchemy
        FAILS=$(cat logs/*run-tests.log | grep -oP '^=+ \d+ failed, ' | awk '{ print $2 }')
        STATUS='PASS'
        RC=0
        if [[ -z ${FAILS} ]]; then
          STATUS='ERROR'
          RC=1
        fi
        if [[ ${FAILS} -gt ${BASELINE:-10000} ]]; then
          STATUS='FAIL'
          RC=1
        else
          #MAIN=$(git -C ./proxysql remote show origin | grep -Po '(?<=HEAD branch: ).*')
          MAIN=$(curl -s https://api.github.com/repos/${{ github.repository }} | jq --raw-output .default_branch)
          #MAIN=$(gh repo view ${{ github.repository }} --json defaultBranchRef --jq .defaultBranchRef.name)
          if [[ ${MAIN} == ${{ github.ref_name }} ]]; then
            echo "INFRADB: '${INFRADB}' CONNECTOR: '${CONNECTOR}' Setting new BASELINE: ${FAILS} for '${MAIN}'"
            gh variable -R ${{ github.repository }} set BASELINE_3P_SQLALCHEMY_${{ matrix.infradb }}_${{ matrix.connector }} -b "${FAILS}"
          fi
        fi
        SUM="{'STATUS':'${STATUS}','INFRADB':'${INFRADB}','CONNECTOR':'${CONNECTOR}','BASELINE':${BASELINE:-10000},'FAILS':${FAILS:-1}}"
        echo "SUMMARY="${SUM//\'/\"} >> $GITHUB_ENV
        exit $RC
    
    - name: Summary output
      if: ${{ !cancelled() }}
      uses: hoverkraft-tech/ci-github-common/actions/set-matrix-output@0.14.0
      with:
        value: ${{ env.SUMMARY }}
        artifact-name: "summary"
      
    - name: Archive artifacts logs
      if: ${{ failure() && !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.workflow }}-${{ github.sha }}-${{ matrix.infradb }}-${{ matrix.connector }}-logs-run#${{ github.run_number }}
        path: |
          proxysql_3p_testing/test_sqlalchemy/logs
          
          
  summarize:
    runs-on: ubuntu-22.04
    needs: [ test ]
    if: ${{ !cancelled() }}
    steps:
      - name: Collect summary
        id: collect
        uses: hoverkraft-tech/ci-github-common/actions/get-matrix-outputs@0.14.0
        with:
          artifact-name: "summary"
          remove-artifact: true
      
      - name: Output summary
        run:
          echo '${{ steps.collect.outputs.result }}' | jq -c '.[]' | sort
          echo '${{ steps.collect.outputs.result }}' | jq -c '.[]' | sort >> $GITHUB_STEP_SUMMAR
